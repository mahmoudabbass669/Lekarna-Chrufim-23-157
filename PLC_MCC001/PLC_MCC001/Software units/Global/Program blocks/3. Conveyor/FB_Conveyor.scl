NAMESPACE Global
FUNCTION_BLOCK FB_Conveyor
{ S7_Optimized_Access := 'TRUE' ; Published := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      ConveyorID : Int;
      ConveyorSensor : Bool;
      Fault : Bool;
      Upstream : Bool;
      Downstream : Bool;
      Interlock : Bool;
   END_VAR

   VAR_OUTPUT 
      RunForward : Bool;
      WriteAsiDir : Bool;
      WriteAsiSpeed : Bool;
      NordControlEnable : Word;
      NordSetpoint : Word;
      ImcSpeed : SInt;
   END_VAR

   VAR 
      sConvID : Int;
      ReadInputSignal : Struct
         ConveyorSensor : Bool;
         EmergencyStop : Bool;
         Fault : Bool;
      END_STRUCT;
      MotorType : Struct
         "24v-ASi" : Bool;
         nord : Bool;
         "24v-IMC" : Bool;
      END_STRUCT;
      Active : Struct
         Line : Struct
            ProductionLine : Bool;
            EmptyLine : Bool;
            PackedLine : Bool;
         END_STRUCT;
         EstopZone { S7_SetPoint := 'False'} : EsopZone;
      END_STRUCT;
      CONVEYOR_SENSOR : FB_Sensor;
      CONVEYOR_SENSOR_BLOCKAGE : FB_SensorBlockage;
      CONVEYOR_STATUS_ON : FB_StatusON;
      CONVEYOR_STATUS_READY : FB_StatusReady;
      CONVEYOR_STATUS_FAULT : FB_StatusFault;
      "RUN/STOP_CONVEYOR" : FB_RunStop;
      ENERGY_SAVE : FB_EnergySave;
      AUTO_RESET : FB_AutoReset;
      SSR { S7_SetPoint := 'False'} : SystemSSR;
      ReadConveyorStatus : ConveyorStatus;
      ReadConveyorParameters { S7_SetPoint := 'False'} : ConveyorParameters := ((), [2(T#10ms)], (), (), (), ());
      ConveyorFault : Fault;
      SimuMode : Struct
         Sensor : Bool;
         Fault : Bool;
         Estop : Struct
            Zone : Struct
               "1" : Bool;
               "2" : Bool;
               "3" : Bool;
               "4" : Bool;
            END_STRUCT;
         END_STRUCT;
      END_STRUCT;
      StartUpTimer {InstructionName := 'TOF_TIME'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TOF_TIME;
      FT_StartUp {InstructionName := 'F_TRIG'; LibVersion := '1.0'} : F_TRIG;
      SetStartUp { S7_SetPoint := 'True'} : Bool;
      FilteredSensor { S7_SetPoint := 'True'} : Bool;
      StopSystemFireActive : Bool;
      EnergySave : Bool;
      StartMotorForward : Bool;
      StartMotorReverse : Bool;
      AutoReset { S7_SetPoint := 'True'} : Bool;
      NullSpeed : SInt;
      VisuColor : Word;
      NordSetpointRun : Word := 16#047F;
      NordSetpointReady : Word := 16#047E;
      NordFaultAck : Word := 16#0080;
   END_VAR


BEGIN
	// ==========================================================================================================================================
	// Company        : LogTech, s.r.o.
	// Created by     : Anton Vinoth Soundraraj
	// Block          : FB_Conveyor
	// Project        : Lékarna DC Chrudim
	// Project number : 23-157
	// ==========================================================================================================================================
	
	// input to static
	#sConvID := #ConveyorID;
	
	REGION Active Line
	    
	    // Production Line
	    IF (#ConveyorID >= _.gminProductionLine AND
	        #ConveyorID <= _.gmaxProductionLine)
	    THEN
	        #Active.Line.ProductionLine := TRUE;
	    END_IF;
	    
	    // Empty Line
	    IF (#ConveyorID >= _.gminEmptyLine AND
	        #ConveyorID <= _.gmaxEmptyLine)
	    THEN
	        #Active.Line.EmptyLine := TRUE;
	    END_IF;
	    
	    // Packed Line
	    IF (#ConveyorID >= _.gminPackedLine AND
	        #ConveyorID <= _.gmaxPackedLine)
	    THEN
	        #Active.Line.PackedLine := TRUE;
	    END_IF;
	    
	END_REGION
	
	REGION Init motor type
	    
	    REGION ASi Motor Type
	        // line Production, Empty and Packed
	        //Production Line
	        IF (#ConveyorID >= _.gminProductionLine AND
	            #ConveyorID <= _.gmaxProductionLine) OR
	            //Empty Line
	            (#ConveyorID >= _.gminEmptyLine AND
	            #ConveyorID <= _.gmaxEmptyLine) OR
	            //Packed line 
	            (#ConveyorID >= _.gminPackedLine AND
	            #ConveyorID <= _.gmaxPackedLine)
	        THEN
	            #MotorType."24v-ASi" := TRUE;
	        END_IF;
	    END_REGION
	
	    REGION InterRoll Motor Type
	        //Packed line 
	        IF (#ConveyorID >= _.gminPackedLine AND
	            #ConveyorID <= _.gmaxPackedLine)
	        THEN
	            #MotorType."24v-IMC" := TRUE;
	        END_IF;
	    END_REGION
	
	    
	END_REGION
	
	REGION Estop zone
	    
	        // Production Line A1
	    IF (#ConveyorID >= _."gA1.1.1" AND
	        #ConveyorID <= _."gA1.7.6") OR
	        (#ConveyorID >= _."gB1.1.1" AND
	        #ConveyorID <= _."gC1.4.2") OR
	       // (#ConveyorID >= _."gA1.6.1" AND
	       // #ConveyorID <= _."gA1.6.2") OR
	       // (#ConveyorID >= _."gB1.6.1" AND
	       // #ConveyorID <= _."gC1.3.1") OR
	        // Empty Line A1
	        (#ConveyorID >= _."gJ1.5.2" AND
	        #ConveyorID <= _."gJ1.6.2")
	    THEN
	        #Active.EstopZone."1" := TRUE;
	    END_IF;
	    
	    // Production Line A2
	    IF  (#ConveyorID >= _."gA1.8.1" AND
	        #ConveyorID <= _."gA2.4.26") OR
	        (#ConveyorID >= _."gD1.1.1" AND
	        #ConveyorID <= _."gE1.6.1") OR
	        //(#ConveyorID >= _."gA1.9.1" AND
	        //#ConveyorID <= _."gA1.9.2") OR
	        //(#ConveyorID >= _."gA1.13.1" AND
	        //#ConveyorID <= _."gA2.1.1") OR
	        //(#ConveyorID >= _."gD1.9.1" AND
	        //#ConveyorID <= _."gD1.10.1") OR
	        //Empty Line A2
	        (#ConveyorID >= _."gJ1.1.1" AND
	        #ConveyorID <= _."gJ1.5.1") OR 
	        // Packed Line
	        (#ConveyorID >= _.gminPackedLine AND
	        #ConveyorID <= _.gmaxPackedLine)
	    THEN
	        #Active.EstopZone."2" := TRUE;
	    END_IF;
	    
	END_REGION
	
	REGION SystemSSR
	    
	    //Zone 1
	    IF #Active.EstopZone."1" THEN
	        #SSR.StartSystem := DB_SystemSSR.Zone."1".StartSystem;
	        #SSR.StopSystem := DB_SystemSSR.Zone."1".StopSystem;
	        #SSR.ResetSystem := DB_SystemSSR.Zone."1".ResetSystem;
	    END_IF;
	    
	    //Zone 2
	    IF #Active.EstopZone."2" THEN
	        #SSR.StartSystem := DB_SystemSSR.Zone."2".StartSystem;
	        #SSR.StopSystem := DB_SystemSSR.Zone."2".StopSystem;
	        #SSR.ResetSystem := DB_SystemSSR.Zone."2".ResetSystem;
	    END_IF;
	    
	END_REGION
	
	REGION Read Simu inputs  
	    
	    // ProductionLine
	    IF #Active.Line.ProductionLine THEN
	        // read simu
	        #SimuMode.Sensor := DB_SystemSimu.TriggerSensor.Line.ProductionLine.Conveyor[#ConveyorID];
	        #SimuMode.Fault := DB_SystemSimu.TriggerFault.Line.ProductionLine.Conveyor[#ConveyorID];
	    END_IF;
	    
	    // EmptyLine
	    IF #Active.Line.EmptyLine THEN
	        // read simu
	        #SimuMode.Sensor := DB_SystemSimu.TriggerSensor.Line.EmptyLine.Conveyor[#ConveyorID];
	        #SimuMode.Fault := DB_SystemSimu.TriggerFault.Line.EmptyLine.Conveyor[#ConveyorID];
	    END_IF;
	    
	    // PackedLine
	    IF #Active.Line.PackedLine THEN
	        // read simu
	        #SimuMode.Sensor := DB_SystemSimu.TriggerSensor.Line.PackedLine.Conveyor[#ConveyorID];
	        #SimuMode.Fault := DB_SystemSimu.TriggerFault.Line.PackedLine.Conveyor[#ConveyorID];
	    END_IF;
	    
	END_REGION
	
	REGION Read Input
	    
	    // read all inputs to the block
	    // Conveyor input read signals
	    #ReadInputSignal.ConveyorSensor := #ConveyorSensor OR   // NOT #ConveyorSensor
	    #SimuMode.Sensor; // simu call
	    #ReadInputSignal.Fault := #Fault OR
	    #SimuMode.Fault; // simu call;
	    #ReadInputSignal.EmergencyStop := // all estop zones are connected together
	    _.DB_SafetyStandard.ToStandard.EstopActive;
	    
	END_REGION
	
	REGION READ AND INIT
	    
	    REGION Init conveyor parameters
	        
	        // Conveyor Parameter
	        // ProductionLine
	        IF #Active.Line.ProductionLine THEN
	            #ReadConveyorParameters := DB_ConveyorParameters.Line.ProductionLine.Conveyor[#ConveyorID];
	        END_IF;
	        // EmptyLine
	        IF #Active.Line.EmptyLine THEN
	            #ReadConveyorParameters := DB_ConveyorParameters.Line.EmptyLine.Conveyor[#ConveyorID];
	        END_IF;
	        // PackedLine
	        IF #Active.Line.PackedLine THEN
	            #ReadConveyorParameters := DB_ConveyorParameters.Line.PackedLine.Conveyor[#ConveyorID];
	        END_IF;
	        
	    END_REGION
	    
	    REGION Sensor Filter
	        
	        // FB_Sensor
	        // called as MIDB
	        
	        #CONVEYOR_SENSOR(Sensor           := #ReadInputSignal.ConveyorSensor,
	                         SensorFilterTime := #ReadConveyorParameters.SensorFilterTime,
	                         FilteredSensor   => #FilteredSensor);
	        
	    END_REGION
	    
	    REGION FIRE
	        
	        // Fire signal from fire system stops the whole system
	        // System can be reset from Fire status only if the fire signal is deactivated
	        
	        // FIRE ALARM ACTIVE --> STOP SYSTEM
	        IF DB_SystemSimu.Fire THEN
	            #StopSystemFireActive := TRUE;
	        END_IF;
	        // RESET --> FIRE ALARM
	        IF #SSR.ResetSystem AND NOT DB_SystemSimu.Fire THEN
	            #StopSystemFireActive := FALSE;
	        END_IF;
	        
	    END_REGION
	    
	END_REGION
	
	REGION Conveyor startup
	    
	    // Conveyor StartUp: Conveyor startup signal after preset time
	    #StartUpTimer.TOF(IN := #SSR.StartSystem,
	                      PT := #ReadConveyorParameters.StartUpTime);
	    
	    #FT_StartUp(CLK := #StartUpTimer.Q);
	    
	    // set startup after the preset
	    #SetStartUp := #FT_StartUp.Q;
	    
	END_REGION
	
	REGION Conveyor Status
	    
	    REGION Status ON
	        
	        // ----------------------------------------->>>>>>> STATUS ON <<<<<<<-----------------------------------------
	        // FB_ConveyorStatusON
	        // called as IDMB
	        
	        #CONVEYOR_STATUS_ON(SystemStartActive := #SSR.StartSystem,
	                            StatusStop        := #ReadConveyorStatus.Stop,
	                            StatusEStop       := #ReadConveyorStatus.Estop,
	                            StatusManual      := #ReadConveyorStatus.Manual,
	                            StatusFault       := #ReadConveyorStatus.Fault,
	                            FireAlarmActive   := #StopSystemFireActive,
	                            StatusON          => #ReadConveyorStatus.ON);
	        
	    END_REGION
	    
	    REGION Status Ready
	        
	        // ----------------------------------------->>>>>>> STATUS READY <<<<<<<-----------------------------------------
	        // FB_ConveyorStatusReady
	        // called as MIDB
	        
	        #CONVEYOR_STATUS_READY(StatusON        := #ReadConveyorStatus.ON,
	                               StatusESTOP     := #ReadConveyorStatus.Estop,
	                               StatusFAULT     := #ReadConveyorStatus.Fault,
	                               StatusMAN       := #ReadConveyorStatus.Manual,
	                               SignalFIRE      := #StopSystemFireActive,
	                               SystemAlertTime := #ReadConveyorParameters.StartUpTime,
	                               StatusReady     => #ReadConveyorStatus.ReadytoRun);
	        
	    END_REGION
	    
	    REGION Status Occupied
	        
	        // ----------------------------------------->>>>>>> STATUS OCCUPIED <<<<<<<-----------------------------------------
	        #ReadConveyorStatus.Occupied := #FilteredSensor;
	        
	    END_REGION
	    
	    REGION Status Running
	        
	        // ----------------------------------------->>>>>>> STATUS RUNNING <<<<<<<-----------------------------------------
	        
	        #ReadConveyorStatus.Running := #StartMotorForward OR #StartMotorReverse;
	        
	    END_REGION
	    
	    REGION Status Fault
	        
	        // ----------------------------------------->>>>>>> STATUS FAULT <<<<<<<-----------------------------------------
	        
	        // Automatic reset trigger to the needed drive after wakeup from ESTOP power miss (only if needed)
	        // will trigger for every Reset active
	        
	        #AUTO_RESET(AckIN := #SSR.ResetSystem,
	                    Ack   => #AutoReset);
	        
	        // Reading error signal from the motor drive
	        #ConveyorFault.Motor_Error := #ReadInputSignal.Fault;
	        
	        // FC_ConveyorStatusFault
	        #CONVEYOR_STATUS_FAULT(FaultActive   := #ConveyorFault.Motor_Error,
	                               ResetFault    := #SSR.ResetSystem OR #AutoReset,
	                               StatusRunning := #ReadConveyorStatus.Running,
	                               FaultStatus   => #ReadConveyorStatus.Fault);
	        
	    END_REGION
	    
	    REGION Status ESTOP
	        
	        // ----------------------------------------->>>>>>> STATUS ESTOP <<<<<<<-----------------------------------------
	        
	        // EMERGENCY STOP ACTIVE --> STOP SYSTEM
	        IF #ReadInputSignal.EmergencyStop THEN
	            #ReadConveyorStatus.Estop := TRUE;
	        END_IF;
	        // RESET --> EMERGENCY STOP
	        IF #AutoReset AND NOT #ReadInputSignal.EmergencyStop THEN // (reset after 12 seconds) : Auto Reset
	            #ReadConveyorStatus.Estop := FALSE;
	        END_IF;
	        
	    END_REGION
	    
	    REGION Status Manual
	        
	        // ----------------------------------------->>>>>>> STATUS MANUAL <<<<<<<-----------------------------------------
	        
	        // Write to static from IO
	        // ACTIVATE --> MANUAL MODE
	        // ProductionLine
	        IF #Active.Line.ProductionLine THEN
	            // SET --> MANUAL MODE
	            IF DB_Manual.Line.ProductionLine.Conveyor[#ConveyorID].ManualEnable THEN
	                #ReadConveyorStatus.Manual := TRUE;
	            END_IF;
	            // RESET --> MANUAL MODE
	            IF NOT DB_Manual.Line.ProductionLine.Conveyor[#ConveyorID].ManualEnable AND #SSR.ResetSystem THEN
	                #ReadConveyorStatus.Manual := FALSE;
	            END_IF;
	        END_IF;
	        // EmptyLine
	        IF #Active.Line.EmptyLine THEN
	            // SET --> MANUAL MODE
	            IF DB_Manual.Line.EmptyLine.Conveyor[#ConveyorID].ManualEnable THEN
	                #ReadConveyorStatus.Manual := TRUE;
	            END_IF;
	            // RESET --> MANUAL MODE
	            IF NOT DB_Manual.Line.EmptyLine.Conveyor[#ConveyorID].ManualEnable AND #SSR.ResetSystem THEN
	                #ReadConveyorStatus.Manual := FALSE;
	            END_IF;
	        END_IF;
	        // PackedLine
	        IF #Active.Line.PackedLine THEN
	            // SET --> MANUAL MODE
	            IF DB_Manual.Line.PackedLine.Conveyor[#ConveyorID].ManualEnable THEN
	                #ReadConveyorStatus.Manual := TRUE;
	            END_IF;
	            // RESET --> MANUAL MODE
	            IF NOT DB_Manual.Line.PackedLine.Conveyor[#ConveyorID].ManualEnable AND #SSR.ResetSystem THEN
	                #ReadConveyorStatus.Manual := FALSE;
	            END_IF;
	        END_IF;
	        
	        // Manual enable and Run from HMI
	        // ProductionLine
	        IF #Active.Line.ProductionLine THEN
	            IF #ConveyorID = DB_Manual.Conveyor.ID THEN
	                DB_Manual.Line.ProductionLine.Conveyor[DB_Manual.Conveyor.ID].ManualEnable := DB_Manual.Conveyor.Enable;
	                DB_Manual.Line.ProductionLine.Conveyor[DB_Manual.Conveyor.ID].Run.Forward := DB_Manual.Conveyor.in;
	            END_IF;
	        END_IF;
	        // EmptyLine
	        IF #Active.Line.EmptyLine THEN
	            IF #ConveyorID = DB_Manual.Conveyor.ID THEN
	                DB_Manual.Line.EmptyLine.Conveyor[DB_Manual.Conveyor.ID].ManualEnable := DB_Manual.Conveyor.Enable;
	                DB_Manual.Line.EmptyLine.Conveyor[DB_Manual.Conveyor.ID].Run.Forward := DB_Manual.Conveyor.in;
	            END_IF;
	        END_IF;
	        // PackedLine
	        IF #Active.Line.PackedLine THEN
	            IF #ConveyorID = DB_Manual.Conveyor.ID THEN
	                DB_Manual.Line.PackedLine.Conveyor[DB_Manual.Conveyor.ID].ManualEnable := DB_Manual.Conveyor.Enable;
	                DB_Manual.Line.PackedLine.Conveyor[DB_Manual.Conveyor.ID].Run.Forward := DB_Manual.Conveyor.in;
	            END_IF;
	        END_IF;
	        
	    END_REGION
	    
	    REGION Status Stop
	        
	        // ----------------------------------------->>>>>>> STATUS STOP <<<<<<<-----------------------------------------
	        
	        IF #SSR.StopSystem THEN
	            #ReadConveyorStatus.Stop := TRUE;
	        END_IF;
	        IF #SSR.StartSystem OR #SSR.ResetSystem THEN
	            #ReadConveyorStatus.Stop := FALSE;
	        END_IF;
	        
	    END_REGION
	    
	    REGION Sensor Blockage
	        
	        // ----------------------------------------->>>>>>> STATUS BLOCKAGE <<<<<<<------------------------------------
	        
	        // FB_SensorBlockage
	        // called as MIDB
	        #CONVEYOR_SENSOR_BLOCKAGE(ConveyorSensor       := #FilteredSensor,
	                                  StatusRunning        := #ReadConveyorStatus.Running,
	                                  SensorBlockagePeriod := #ReadConveyorParameters.SensorBlockageTime,
	                                  SensorBlocked        => #ConveyorFault.Sensor_Blockage,
	                                  ReadBlockageStatus   => #ReadConveyorStatus.Blockage);
	        
	        REGION alarm 
	            
	            // ==========================
	            // Sensor Blockage: HMI Alarm
	            // ==========================
	            // Sensor blockage alarm message is written to the alarm word
	            // corresponding to the active line
	            // ProductionLine
	            IF #Active.Line.ProductionLine THEN
	                DB_Alarm."word".Line.ProductionLine.Conveyor[#ConveyorID].%X0 := #ReadConveyorStatus.Blockage;
	            END_IF;
	            // EmptyLine
	            IF #Active.Line.EmptyLine THEN
	                DB_Alarm."word".Line.EmptyLine.Conveyor[#ConveyorID].%X0 := #ReadConveyorStatus.Blockage;
	            END_IF;
	            // PackedLine
	            IF #Active.Line.PackedLine THEN
	                DB_Alarm."word".Line.PackedLine.Conveyor[#ConveyorID].%X0 := #ReadConveyorStatus.Blockage;
	            END_IF;
	            
	        END_REGION
	        
	    END_REGION
	    
	    REGION Visu Color
	        
	        // each and every status of the conveyor will be mentioned by different colors in HMI panel
	        
	        #VisuColor.%X8 := #ReadConveyorStatus.Blockage;
	        #VisuColor.%X0 := #ReadConveyorStatus.ON;
	        #VisuColor.%X1 := #ReadConveyorStatus.ReadytoRun;
	        #VisuColor.%X2 := #ReadConveyorStatus.Occupied;
	        #VisuColor.%X3 := #ReadConveyorStatus.Running;
	        #VisuColor.%X4 := #ReadConveyorStatus.Fault;
	        #VisuColor.%X5 := #ReadConveyorStatus.Estop;
	        #VisuColor.%X6 := #ReadConveyorStatus.Manual;
	        #VisuColor.%X7 := #ReadConveyorStatus.Stop;
	        
	        // convert word to Interger value: 
	        // color will be depends on the status priority (integer value) 
	        // reference: Conveyor image in HMI screen -> property -> Apperance   
	        
	        // ProductionLine
	        IF #Active.Line.ProductionLine THEN
	            DB_VisuColor.Line.ProductionLine.Conveyor[#ConveyorID] :=
	            WORD_TO_INT(#VisuColor);
	        END_IF;
	        // EmptyLine
	        IF #Active.Line.EmptyLine THEN
	            DB_VisuColor.Line.EmptyLine.Conveyor[#ConveyorID] :=
	            WORD_TO_INT(#VisuColor);
	        END_IF;
	        // PackedLine
	        IF #Active.Line.PackedLine THEN
	            DB_VisuColor.Line.PackedLine.Conveyor[#ConveyorID] :=
	            WORD_TO_INT(#VisuColor);
	        END_IF;
	        
	    END_REGION
	    
	    REGION Global Status
	        
	        // write -> global status
	        // ProductionLine
	        IF #Active.Line.ProductionLine THEN
	            DB_Global.Status.Line.ProductionLine.On[#ConveyorID] := #ReadConveyorStatus.ON;
	            DB_Global.Status.Line.ProductionLine.ReadyToRun[#ConveyorID] := #ReadConveyorStatus.ReadytoRun;
	            DB_Global.Status.Line.ProductionLine.Occupied[#ConveyorID] := #ReadConveyorStatus.Occupied;
	            DB_Global.Status.Line.ProductionLine.Running[#ConveyorID] := #ReadConveyorStatus.Running;
	            DB_Global.Status.Line.ProductionLine.Fault[#ConveyorID] := #ReadConveyorStatus.Fault;
	            DB_Global.Status.Line.ProductionLine.Estop[#ConveyorID] := #ReadConveyorStatus.Estop;
	            DB_Global.Status.Line.ProductionLine.Manual[#ConveyorID] := #ReadConveyorStatus.Manual;
	            DB_Global.Status.Line.ProductionLine.Stop[#ConveyorID] := #ReadConveyorStatus.Stop;
	            DB_Global.Status.Line.ProductionLine.Blockage[#ConveyorID] := #ReadConveyorStatus.Blockage;
	        END_IF;
	        // EmptyLine
	        IF #Active.Line.EmptyLine THEN
	            DB_Global.Status.Line.EmptyLine.On[#ConveyorID] := #ReadConveyorStatus.ON;
	            DB_Global.Status.Line.EmptyLine.ReadyToRun[#ConveyorID] := #ReadConveyorStatus.ReadytoRun;
	            DB_Global.Status.Line.EmptyLine.Occupied[#ConveyorID] := #ReadConveyorStatus.Occupied;
	            DB_Global.Status.Line.EmptyLine.Running[#ConveyorID] := #ReadConveyorStatus.Running;
	            DB_Global.Status.Line.EmptyLine.Fault[#ConveyorID] := #ReadConveyorStatus.Fault;
	            DB_Global.Status.Line.EmptyLine.Estop[#ConveyorID] := #ReadConveyorStatus.Estop;
	            DB_Global.Status.Line.EmptyLine.Manual[#ConveyorID] := #ReadConveyorStatus.Manual;
	            DB_Global.Status.Line.EmptyLine.Stop[#ConveyorID] := #ReadConveyorStatus.Stop;
	            DB_Global.Status.Line.EmptyLine.Blockage[#ConveyorID] := #ReadConveyorStatus.Blockage;
	        END_IF;
	        // PackedLine
	        IF #Active.Line.PackedLine THEN
	            DB_Global.Status.Line.PackedLine.On[#ConveyorID] := #ReadConveyorStatus.ON;
	            DB_Global.Status.Line.PackedLine.ReadyToRun[#ConveyorID] := #ReadConveyorStatus.ReadytoRun;
	            DB_Global.Status.Line.PackedLine.Occupied[#ConveyorID] := #ReadConveyorStatus.Occupied;
	            DB_Global.Status.Line.PackedLine.Running[#ConveyorID] := #ReadConveyorStatus.Running;
	            DB_Global.Status.Line.PackedLine.Fault[#ConveyorID] := #ReadConveyorStatus.Fault;
	            DB_Global.Status.Line.PackedLine.Estop[#ConveyorID] := #ReadConveyorStatus.Estop;
	            DB_Global.Status.Line.PackedLine.Manual[#ConveyorID] := #ReadConveyorStatus.Manual;
	            DB_Global.Status.Line.PackedLine.Stop[#ConveyorID] := #ReadConveyorStatus.Stop;
	            DB_Global.Status.Line.PackedLine.Blockage[#ConveyorID] := #ReadConveyorStatus.Blockage;
	        END_IF;
	        
	    END_REGION
	    
	END_REGION
	
	REGION Run/Stop Conveyor 
	    
	    // FB_ConveyorRunStop
	    // Called as MIDB
	    
	    #"RUN/STOP_CONVEYOR"(StatusReady  := #ReadConveyorStatus.ReadytoRun,
	                         StatusOccu   := #ReadConveyorStatus.Occupied,
	                         DSOcc        := #Downstream,
	                         USOcc        := #Upstream,
	                         EnergySave   := #EnergySave,
	                         ILStop       := #Interlock,
	                         PecBlockage  := #ConveyorFault.Sensor_Blockage,
	                         MotorForward => #StartMotorForward,
	                         MotorReverse => #StartMotorReverse);
	    
	END_REGION
	
	REGION Energy Save
	    
	    // FB_EnergySave
	    // Called as MIDB
	    
	    #ENERGY_SAVE(StatusReady      := #ReadConveyorStatus.ReadytoRun,
	                 StatusOccupied   := #ReadConveyorStatus.Occupied,
	                 StartUpIN        := #SetStartUp,
	                 USOcc            := #Upstream,
	                 EnergySaveTimePT := #ReadConveyorParameters.EnergySaveTime,
	                 EnergySaveOut    => #EnergySave);
	    
	END_REGION
	
	REGION Write logic and parameters
	    
	    // Motor Forward: motors which has only one control bit
	    // ProductionLine 
	    IF #Active.Line.ProductionLine THEN
	        #RunForward :=
	        (#StartMotorForward AND NOT #StartMotorReverse) // Automatic mode
	        OR (#ReadConveyorStatus.Manual AND DB_Manual.Line.ProductionLine.Conveyor[#ConveyorID].Run.Forward); //Manual mode
	    END_IF;
	    // EmptyLine 
	    IF #Active.Line.EmptyLine THEN
	        #RunForward :=
	        (#StartMotorForward AND NOT #StartMotorReverse) // Automatic mode
	        OR (#ReadConveyorStatus.Manual AND DB_Manual.Line.EmptyLine.Conveyor[#ConveyorID].Run.Forward); //Manual mode
	    END_IF;
	    // PackedLine 
	    IF #Active.Line.PackedLine THEN
	        #RunForward :=
	        (#StartMotorForward AND NOT #StartMotorReverse) // Automatic mode
	        OR (#ReadConveyorStatus.Manual AND DB_Manual.Line.PackedLine.Conveyor[#ConveyorID].Run.Forward); //Manual mode
	    END_IF;
	    
	    REGION Bihl Wiedemann 
	        
	        // process data for BW-ASi
	        
	        IF #MotorType."24v-ASi" THEN
	            
	            REGION Direction
	                
	                // ProductionLine
	                IF #Active.Line.ProductionLine THEN
	                    #WriteAsiDir := DB_AsiSetpoint.Line.ProductionLine.DirChange.Conveyor[#ConveyorID];
	                END_IF;
	                // EmptyLine
	                IF #Active.Line.EmptyLine THEN
	                    #WriteAsiDir := DB_AsiSetpoint.Line.EmptyLine.DirChange.Conveyor[#ConveyorID];
	                END_IF;
	                // PackedLine
	                IF #Active.Line.PackedLine THEN
	                    #WriteAsiDir := DB_AsiSetpoint.Line.PackedLine.DirChange.Conveyor[#ConveyorID];
	                END_IF;
	                
	            END_REGION
	            
	            REGION Speed
	                
	                // ProductionLine
	                IF #Active.Line.ProductionLine THEN
	                    #WriteAsiSpeed := DB_AsiSetpoint.Line.ProductionLine.Speed.Conveyor[#ConveyorID];
	                END_IF;
	                // EmptyLine
	                IF #Active.Line.EmptyLine THEN
	                    #WriteAsiSpeed := DB_AsiSetpoint.Line.EmptyLine.Speed.Conveyor[#ConveyorID];
	                END_IF;
	                // PackedLine
	                IF #Active.Line.PackedLine THEN
	                    #WriteAsiSpeed := DB_AsiSetpoint.Line.PackedLine.Speed.Conveyor[#ConveyorID];
	                END_IF;
	                
	            END_REGION
	            
	        END_IF;
	        
	    END_REGION
	    
	    REGION NORD (Line shaft)
	        
	        // process data and logic for NORD VFD
	        
	        IF #MotorType.nord THEN
	            
	            // ProductionLine
	            IF #Active.Line.ProductionLine THEN
	                
	                IF NOT #ReadConveyorStatus.Fault THEN
	                    IF // Nord Motor Run - Automatic mode
	                        ((#ReadConveyorStatus.ReadytoRun AND
	                        #StartMotorForward) OR
	                        // Nord Motor Run - manual mode
	                        (#ReadConveyorStatus.Manual AND
	                        DB_Manual.Line.ProductionLine.Conveyor[#ConveyorID].Run.Forward))
	                    THEN
	                        #NordControlEnable := #NordSetpointRun;
	                    ELSE
	                        #NordControlEnable := #NordSetpointReady;
	                    END_IF;
	                END_IF;
	                
	                // Nord Motor Fault ack
	                IF #ReadConveyorStatus.Fault AND #SSR.ResetSystem THEN
	                    #NordControlEnable := #NordFaultAck;
	                END_IF;
	                
	                // Nord setpoint
	                #NordSetpoint := DINT_TO_WORD(DB_NordSetPoint.Line.ProductionLine.Conveyor[#ConveyorID]);
	                
	            END_IF;
	            
	            // EmptyLine
	            IF #Active.Line.EmptyLine THEN
	                
	                IF NOT #ReadConveyorStatus.Fault THEN
	                    IF // Nord Motor Run - Automatic mode
	                        ((#ReadConveyorStatus.ReadytoRun AND
	                        #StartMotorForward) OR
	                        // Nord Motor Run - manual mode
	                        (#ReadConveyorStatus.Manual AND
	                        DB_Manual.Line.EmptyLine.Conveyor[#ConveyorID].Run.Forward))
	                    THEN
	                        #NordControlEnable := #NordSetpointRun;
	                    ELSE
	                        #NordControlEnable := #NordSetpointReady;
	                    END_IF;
	                END_IF;
	                
	                // Nord Motor Fault ack
	                IF #ReadConveyorStatus.Fault AND #SSR.ResetSystem THEN
	                    #NordControlEnable := #NordFaultAck;
	                END_IF;
	                
	                // Nord setpoint
	                #NordSetpoint := DINT_TO_WORD(DB_NordSetPoint.Line.EmptyLine.Conveyor[#ConveyorID]);
	                
	            END_IF;
	            
	            // PackedLine
	            IF #Active.Line.PackedLine THEN
	                
	                IF NOT #ReadConveyorStatus.Fault THEN
	                    IF // Nord Motor Run - Automatic mode
	                        ((#ReadConveyorStatus.ReadytoRun AND
	                        #StartMotorForward) OR
	                        // Nord Motor Run - manual mode
	                        (#ReadConveyorStatus.Manual AND
	                        DB_Manual.Line.PackedLine.Conveyor[#ConveyorID].Run.Forward))
	                    THEN
	                        #NordControlEnable := #NordSetpointRun;
	                    ELSE
	                        #NordControlEnable := #NordSetpointReady;
	                    END_IF;
	                END_IF;
	                
	                // Nord Motor Fault ack
	                IF #ReadConveyorStatus.Fault AND #SSR.ResetSystem THEN
	                    #NordControlEnable := #NordFaultAck;
	                END_IF;
	                
	                // Nord setpoint
	                #NordSetpoint := DINT_TO_WORD(DB_NordSetPoint.Line.PackedLine.Conveyor[#ConveyorID]);
	                
	            END_IF;
	            
	            
	   END_IF;
	            
	            
	END_REGION
	
	REGION Interroll Multi control roller
	    
	    // process data for Interroll multicontrol card
	    IF #MotorType."24v-IMC" THEN
	    // PackedLine
	        IF #Active.Line.PackedLine THEN
	            IF (#StartMotorForward AND NOT #StartMotorReverse)
	            OR (#ReadConveyorStatus.Manual AND
	            DB_Manual.Line.PackedLine.Conveyor[#ConveyorID].Run.Forward AND
	            NOT DB_Manual.Line.PackedLine.Conveyor[#ConveyorID].Run.Reverse)
	           THEN
	            #ImcSpeed := #ReadConveyorParameters."IMC-SpeedSetPoint";
	           ELSE
	            #ImcSpeed := #NullSpeed;
	           END_IF;
	       END_IF;
	   END_IF;
	   
	END_REGION
	    
	END_REGION
	
END_FUNCTION_BLOCK
END_NAMESPACE

