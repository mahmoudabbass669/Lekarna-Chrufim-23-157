NAMESPACE Global
FUNCTION_BLOCK FB_S300_FullControl
{ S7_Optimized_Access := 'TRUE' ; Published := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      TransferID : Int;
      TransferSensor : Bool;
      RollerUp : Bool;
      Fault : Bool;
      ReadyToRCV : Bool;
      UpstreamStraight : Bool;
      UpstreamArm : Bool;
      FrontSensor : Bool;
      EndSensor : Bool;
      "Left/RightSensor" : Bool;
      Downstream : Bool;
      PriorityStraight : Bool;
      PriorityArm : Bool;
   END_VAR

   VAR_OUTPUT 
      Direction : Bool;
      Cmd1 : Bool;
      Cmd2 : Bool;
      ErrorReset : Bool;
   END_VAR

   VAR 
      ReadInputSignal : Struct
         EmergencyStop : Bool;
         FireActive : Bool;
         Fault : Bool;
         TransferSensor : Bool;
      END_STRUCT;
      Active : Struct
         Line : Struct
            ProductionTotes : Bool;
         END_STRUCT;
         EstopZone { S7_SetPoint := 'False'} : EsopZone;
      END_STRUCT;
      TRANSFER_SENSOR : FB_Sensor;
      FRONT_SENSOR_FILTER : FB_Sensor;
      "Left/Right_SENSOR_FILTER" : FB_Sensor;
      End_Sensor_Filter : FB_Sensor;
      TRANSFER_SENSOR_BLOCKAGE {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      FRONT_SENSOR_BLOCKAGE {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      END_SENSOR_BLOCKAGE {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      "LEFT/RIGHT_SENSOR_BLOCKAGE" {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      TRANSFER_STATUS_ON : FB_StatusON;
      TRANSFER_STATUS_READY : FB_StatusReady;
      TRANSFER_STATUS_FAULT : FB_StatusFault;
      AUTO_RESET : FB_AutoReset;
      StartUpTimer {InstructionName := 'TOF_TIME'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TOF_TIME;
      FT_StartUp {InstructionName := 'F_TRIG'; LibVersion := '1.0'} : F_TRIG;
      SetStartUp { S7_SetPoint := 'True'} : Bool;
      Init : Struct
         Line : Struct
            A1 : String := 'LineA1';
         END_STRUCT;
      END_STRUCT;
      SSR : SystemSSR;
      ReadTransferStatus : ConveyorStatus;
      ReadTransferParameters : ConveyorParameters_TransferUnit := ((), [2(T#10ms)], [2(T#10ms)], [2(T#10ms)], [()], (), (), ());
      ConveyorFault : Fault;
      StartupTransfer { S7_SetPoint := 'True'} : Bool;
      FilteredSensor { S7_SetPoint := 'True'} : Bool;
      StopSystemFireActive : Bool;
      ClearTransferArea : Bool;
      AutoReset : Bool;
      VisuColor : Word;
      Transfer : Struct
         ErrorReset : Bool;
         Direction : Bool;
         Command_1 : Bool;
         Command_2 : Bool;
      END_STRUCT;
      Intialization_PE {InstructionName := 'R_TRIG'; LibVersion := '1.0'; S7_SetPoint := 'False'} : R_TRIG;
      InitializationDone { S7_SetPoint := 'True'} : Bool;
      StartInitialization : Bool;
      ResetFault_PE {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
   END_VAR


BEGIN
	// ==========================================================================================================================================
	// Company        : LogTech, s.r.o.
	// Created by     : Anton Vinoth Soundraraj
	// Block          : FB_S300_tTransMode
	// Project        : Lékarna DC Chrudim
	// Project number : 23-157
	// ==========================================================================================================================================
	
	REGION Active Line
	    
	        #Active.Line.ProductionTotes := TRUE;
	        
	    END_REGION
	    
	REGION Estop zone
	        
	        // Production Line A1
	    IF  #TransferID = _."gB1.6.1" 
	    THEN
	        #Active.EstopZone."1" := TRUE;
	    END_IF;
	        
	END_REGION
	    
	REGION SystemSSR
	        
	        //Zone 1
	        IF #Active.EstopZone."1" THEN
	            #SSR.StartSystem := DB_SystemSSR.Zone."1".StartSystem;
	            #SSR.StopSystem := DB_SystemSSR.Zone."1".StopSystem;
	            #SSR.ResetSystem := DB_SystemSSR.Zone."1".ResetSystem;
	        END_IF;
	        
	END_REGION
	    
	    
	
	REGION Initialization 
	    // Totes wait untill Initialization is done by haveing Rollers in High Postion
	    
	    #Intialization_PE(CLK := _.Global.DB_SystemSSR.Line.ProductionLine.StartSystem);
	    
	    IF #Intialization_PE.Q THEN
	        #StartInitialization := TRUE;
	    END_IF;
	    
	    IF #StartInitialization THEN
	        IF #RollerUp THEN
	            #InitializationDone := TRUE;
	            #StartInitialization := FALSE;
	        ELSE
	            #InitializationDone := FALSE;
	        END_IF;
	    END_IF;
	    
	END_REGION 
	
	REGION Read Input
	    
	    // read all inputs to the block
	    // Conveyor input read signals
	    #ReadInputSignal.TransferSensor := #TransferSensor;
	    #ReadInputSignal.Fault := #Fault;
	    // Read static tag connections
	    #ReadInputSignal.EmergencyStop := // all estop zones are connected together
	    _.DB_SafetyStandard.ToStandard.EstopActive;
	    // Common system input Read
	    #ReadInputSignal.FireActive :=
	    _.Global.DB_SystemSimu.Fire; // simu call
	    
	END_REGION
	
	REGION Conveyor startup
	    
	    // Conveyor StartUp: Conveyor startup signal after preset time
	    #StartUpTimer.TOF(IN := #SSR.StartSystem,
	                      PT := #ReadTransferParameters.StartUpTime);
	    
	    #FT_StartUp(CLK := #StartUpTimer.Q);
	    
	    // set startup after the preset
	    #SetStartUp := #FT_StartUp.Q;
	    
	END_REGION
	
	REGION READ AND INIT
	    
	    REGION Init conveyor parameters
	        
	        // Conveyor Parameter
	        // Line B1
	        IF #Active.Line.ProductionTotes THEN
	            #ReadTransferParameters := _.Global.DB_ConveyorParameters.Line.ProductionLine.TransferUnit[#TransferID];
	        END_IF;
	        
	    END_REGION
	    
	    REGION Sensor Filter
	        
	        // FB_Sensor
	        // called as MIDB
	        
	       #TRANSFER_SENSOR(Sensor := #ReadInputSignal.TransferSensor,
	                         SensorFilterTime := #ReadTransferParameters.SensorFilterTime,
	                         FilteredSensor => #FilteredSensor); 
	        
	        // front sensor filter
	        #FRONT_SENSOR_FILTER(Sensor := #FrontSensor,
	                             SensorFilterTime := #ReadTransferParameters.FrontSensorFilterTime);
	        
	        #"Left/Right_SENSOR_FILTER"(Sensor:=#"Left/RightSensor",
	                                    SensorFilterTime:=#ReadTransferParameters."Left/RightSensorFilterTime");
	        #End_Sensor_Filter(Sensor:=#EndSensor,
	                           SensorFilterTime:=#ReadTransferParameters.EndsensorFilterTime);
	        
	        
	    END_REGION
	    
	    REGION FIRE
	        
	        // Fire signal from fire system stops the whole system
	        // System can be reset from Fire status only if the fire signal is deactivated
	        
	        // FIRE ALARM ACTIVE --> STOP SYSTEM
	        IF #ReadInputSignal.FireActive THEN
	            #StopSystemFireActive := TRUE;
	        END_IF;
	        // RESET --> FIRE ALARM
	        IF #SSR.ResetSystem AND NOT #ReadInputSignal.FireActive THEN
	            #StopSystemFireActive := FALSE;
	        END_IF;
	        
	    END_REGION
	    
	END_REGION
	
	REGION Conveyor Status
	    
	    REGION Status ON
	        
	        // ----------------------------------------->>>>>>> STATUS ON <<<<<<<-----------------------------------------
	        // FB_ConveyorStatusON
	        // called as IDMB
	        
	        #TRANSFER_STATUS_ON(SystemStartActive := #SSR.StartSystem ,
	                            StatusStop := #ReadTransferStatus.Stop,
	                            StatusEStop := #ReadTransferStatus.Estop,
	                            StatusManual := #ReadTransferStatus.Manual,
	                            StatusFault := #ReadTransferStatus.Fault,
	                            FireAlarmActive := #StopSystemFireActive,
	                            StatusON => #ReadTransferStatus.ON);
	        
	    END_REGION
	    
	    REGION Status Ready
	        
	        // ----------------------------------------->>>>>>> STATUS READY <<<<<<<-----------------------------------------
	        // FB_ConveyorStatusReady
	        // called as MIDB
	        
	        #TRANSFER_STATUS_READY(StatusON := #ReadTransferStatus.ON, //AND #InitializationDone ,
	                               StatusESTOP := #ReadTransferStatus.Estop,
	                               StatusFAULT := #ReadTransferStatus.Fault,
	                               StatusMAN := #ReadTransferStatus.Manual,
	                               SignalFIRE := #StopSystemFireActive,
	                               SystemAlertTime := #ReadTransferParameters.StartUpTime,
	                               StatusReady => #ReadTransferStatus.ReadytoRun);
	        
	    END_REGION
	    
	    REGION Status Occupied
	        
	        // ----------------------------------------->>>>>>> STATUS OCCUPIED <<<<<<<-----------------------------------------
	        
	        #ReadTransferStatus.Occupied :=
	        #FilteredSensor AND
	        NOT #FRONT_SENSOR_FILTER.FilteredSensor AND 
	        NOT #"Left/Right_SENSOR_FILTER".FilteredSensor;
	        
	    END_REGION
	    
	    REGION Status Running
	        
	        // ----------------------------------------->>>>>>> STATUS RUNNING <<<<<<<-----------------------------------------
	        
	        #ReadTransferStatus.Running := #Transfer.Command_1 OR #Transfer.Command_2;
	        
	    END_REGION
	    
	    REGION Status Fault
	        
	        // Automatic reset trigger to the needed drive after wakeup from ESTOP power miss (only if needed)
	        // will trigger for every Reset active
	        
	        #AUTO_RESET(AckIN := #SSR.ResetSystem,
	                    Ack => #AutoReset);
	        
	        // ----------------------------------------->>>>>>> STATUS FAULT <<<<<<<-----------------------------------------
	        
	        #TRANSFER_STATUS_FAULT(FaultActive := #ReadInputSignal.Fault,
	                               ResetFault := #SSR.ResetSystem OR #AutoReset,
	                               StatusRunning := #ReadTransferStatus.Running,
	                               FaultStatus => #ReadTransferStatus.Fault);
	        
	        #ErrorReset := #SSR.ResetSystem AND #ReadTransferStatus.Fault;
	        
	    END_REGION
	    
	    REGION Status ESTOP
	        
	        // ----------------------------------------->>>>>>> STATUS ESTOP <<<<<<<-----------------------------------------
	        
	        // EMERGENCY STOP ACTIVE --> STOP SYSTEM
	        IF #ReadInputSignal.EmergencyStop THEN
	            #ReadTransferStatus.Estop := TRUE;
	        END_IF;
	        // RESET --> EMERGENCY STOP
	        IF #AutoReset AND NOT #ReadInputSignal.EmergencyStop THEN
	            #ReadTransferStatus.Estop := FALSE;
	        END_IF;
	        
	    END_REGION
	    
	    REGION Status Manual
	        
	        // ----------------------------------------->>>>>>> STATUS MANUAL <<<<<<<-----------------------------------------
	        
	        // Write to static from IO
	        // ACTIVATE --> MANUAL MODE
	        // Line B1
	        IF #Active.Line.ProductionTotes THEN
	            // SET --> MANUAL MODE
	            IF _.Global.DB_Manual.Line.ProductionLine.Conveyor[#TransferID].ManualEnable THEN
	                #ReadTransferStatus.Manual := TRUE;
	            END_IF;
	            // RESET --> MANUAL MODE
	            IF NOT _.Global.DB_Manual.Line.ProductionLine.Conveyor[#TransferID].ManualEnable AND #SSR.ResetSystem THEN
	                #ReadTransferStatus.Manual := FALSE;
	            END_IF;
	        END_IF;
	        
	    END_REGION
	    
	    REGION Status Stop
	        
	        // ----------------------------------------->>>>>>> STATUS STOP <<<<<<<-----------------------------------------
	        
	        IF #SSR.StopSystem THEN
	            #ReadTransferStatus.Stop := TRUE;
	        END_IF;
	        IF #SSR.StartSystem OR #SSR.ResetSystem THEN
	            #ReadTransferStatus.Stop := FALSE;
	        END_IF;
	        
	    END_REGION
	    
	    REGION Status Blockage
	        
	        // FB_SensorBlockage
	        // called as MIDB
	        #TRANSFER_SENSOR_BLOCKAGE(IN := #ReadTransferStatus.ReadytoRun AND #FilteredSensor AND NOT #Downstream,
	                                  PT := T#15s);
	        
	        #FRONT_SENSOR_BLOCKAGE(IN := #ReadTransferStatus.ReadytoRun AND #FrontSensor AND NOT #Downstream,
	                               PT := T#15s);
	        
	        #END_SENSOR_BLOCKAGE(IN := #ReadTransferStatus.ReadytoRun AND #EndSensor AND NOT #Downstream,
	                             PT := T#15s);
	        
	        #"LEFT/RIGHT_SENSOR_BLOCKAGE"(IN := #ReadTransferStatus.ReadytoRun AND #"Left/RightSensor" AND NOT #Downstream,
	                                      PT := T#5s);
	        
	        #ReadTransferStatus.Blockage :=
	        (#TRANSFER_SENSOR_BLOCKAGE.Q OR
	        #FRONT_SENSOR_BLOCKAGE.Q OR
	        #END_SENSOR_BLOCKAGE.Q OR
	        #"LEFT/RIGHT_SENSOR_BLOCKAGE".Q);
	        
	        // ==========================
	        // Sensor Blockage: HMI Alarm
	        // ==========================
	        // Sensor blockage alarm message is written to the alarm word
	        // corresponding to the active line
	        
	        REGION alarm 
	            
	            // ==========================
	            // Sensor Blockage: HMI Alarm
	            // ==========================
	            // Sensor blockage alarm message is written to the alarm word
	            // corresponding to the active line
	            // Line B1
	            IF #Active.Line.ProductionTotes THEN
	                _.Global.DB_Alarm."word".Line.ProductionLine.Conveyor[#TransferID].%X0 := #ReadTransferStatus.Blockage;
	            END_IF;
	            
	        END_REGION
	        
	    END_REGION
	    
	    REGION Visu Color
	        
	        // each and every status of the conveyor will be mentioned by different colors in HMI panel
	        
	        #VisuColor.%X8 := #ReadTransferStatus.Blockage;
	        #VisuColor.%X0 := #ReadTransferStatus.ON;
	        #VisuColor.%X1 := #ReadTransferStatus.ReadytoRun;
	        #VisuColor.%X2 := #ReadTransferStatus.Occupied;
	        #VisuColor.%X3 := #ReadTransferStatus.Running;
	        #VisuColor.%X4 := #ReadTransferStatus.Fault;
	        #VisuColor.%X5 := #ReadTransferStatus.Estop;
	        #VisuColor.%X6 := #ReadTransferStatus.Manual;
	        #VisuColor.%X7 := #ReadTransferStatus.Stop;
	        
	        // convert word to Interger value: 
	        // color will be depends on the status priority (integer value) 
	        // reference: Conveyor image in HMI screen -> property -> Apperance   
	        
	        // Line B1
	        IF #Active.Line.ProductionTotes THEN
	            _.Global.DB_VisuColor.Line.ProductionLine.Conveyor[#TransferID] :=
	            WORD_TO_INT(#VisuColor);
	        END_IF;
	        
	    END_REGION
	    
	    REGION Global Status
	        
	        // write -> global status
	        // Line B1
	        IF #Active.Line.ProductionTotes THEN
	            _.Global.DB_Global.Status.Line.ProductionLine.On[#TransferID] := #ReadTransferStatus.ON;
	            _.Global.DB_Global.Status.Line.ProductionLine.ReadyToRun[#TransferID] := #ReadTransferStatus.ReadytoRun;
	            _.Global.DB_Global.Status.Line.ProductionLine.Occupied[#TransferID] := #ReadTransferStatus.Occupied;
	            _.Global.DB_Global.Status.Line.ProductionLine.Running[#TransferID] := #ReadTransferStatus.Running;
	            _.Global.DB_Global.Status.Line.ProductionLine.Fault[#TransferID] := #ReadTransferStatus.Fault;
	            _.Global.DB_Global.Status.Line.ProductionLine.Estop[#TransferID] := #ReadTransferStatus.Estop;
	            _.Global.DB_Global.Status.Line.ProductionLine.Manual[#TransferID] := #ReadTransferStatus.Manual;
	            _.Global.DB_Global.Status.Line.ProductionLine.Stop[#TransferID] := #ReadTransferStatus.Stop;
	            _.Global.DB_Global.Status.Line.ProductionLine.Blockage[#TransferID] := #ReadTransferStatus.Blockage;
	        END_IF;
	        
	    END_REGION
	    
	END_REGION
	
	//===================
	//Transfer Logic
	//===================
	
	REGION #Transfer Logic
	    IF #ReadTransferStatus.ReadytoRun THEN
	        REGION Belt Infeed/Outfeed
	            
	            REGION Belt UP
	                
	                IF (#UpstreamStraight AND
	                    #PriorityStraight AND
	                    NOT #PriorityArm AND
	                    NOT #ReadTransferStatus.Occupied) AND
	                    #RollerUp OR
	                    (#ReadTransferStatus.Occupied AND
	                    #RollerUp)
	                THEN
	                    #Transfer.Command_1 := TRUE;  //Input signal Command 1
	                    #Transfer.Command_2 := TRUE;  //Input signal Command 2
	                    #Transfer.Direction := TRUE;  // Input signal direction of rotation
	                END_IF;
	                
	            END_REGION
	            
	            REGION Belt Run
	                // Run Belt until the negative edge of Sensor
	                
	                IF NOT #RollerUp AND
	                    (#UpstreamStraight OR
	                    #FRONT_SENSOR_FILTER.FilteredSensor) AND
	                    #PriorityStraight AND
	                    NOT #PriorityArm AND
	                    NOT #ReadTransferStatus.Occupied OR
	                    (#ReadTransferStatus.Occupied AND
	                    NOT #RollerUp)
	                THEN
	                    #Transfer.Command_1 := TRUE;  //Input signal Command 1
	                    #Transfer.Command_2 := FALSE;  //Input signal Command 2
	                    #Transfer.Direction := DB_S300SetPoint.Line.ProductionLine.DirChange.Conveyor[#TransferID].BeltDir;  // Input signal direction of rotation
	                END_IF;
	                
	            END_REGION
	            
	            
	        END_REGION
	        
	        REGION Roller Infeed Belt OutFeed
	            REGION Roller Up
	                IF #UpstreamArm AND
	                    #PriorityArm AND
	                    NOT #PriorityStraight AND
	                    NOT #ReadTransferStatus.Occupied AND
	                    NOT #RollerUp 
	                THEN
	                    #Transfer.Command_1 := TRUE;  //Input signal Command 1
	                    #Transfer.Command_2 := TRUE;  //Input signal Command 2
	                    #Transfer.Direction := FALSE;  // Input signal direction of rotation
	                END_IF;
	                
	            END_REGION
	            
	            REGION Roller Run
	                //Run the roller until you get negative edge of Left/Right sensor
	                IF (#UpstreamArm OR
	                    #"Left/Right_SENSOR_FILTER".FilteredSensor) AND
	                    #PriorityArm AND
	                    NOT #PriorityStraight AND
	                    NOT #ReadTransferStatus.Occupied AND
	                    #RollerUp 
	                THEN
	                    #Transfer.Command_1 := FALSE;  //Input signal Command 1
	                    #Transfer.Command_2 := TRUE;  //Input signal Command 2
	                    #Transfer.Direction := DB_S300SetPoint.Line.ProductionLine.DirChange.Conveyor[#TransferID].RollerDir;  // Input signal direction of rotation
	                END_IF;
	                
	            END_REGION
	            
	        END_REGION
	        
	    END_IF;
	    
	    REGION TRANSFER OFF
	        
	        IF  NOT #ReadTransferStatus.ReadytoRun OR 
	            (#ReadTransferStatus.Occupied AND
	            #Downstream) OR
	            (NOT #ReadTransferStatus.Occupied AND
	            NOT #End_Sensor_Filter.FilteredSensor AND
	            NOT #FRONT_SENSOR_FILTER.FilteredSensor AND
	            NOT #"Left/Right_SENSOR_FILTER".FilteredSensor AND 
	            NOT #UpstreamArm AND
	            NOT #UpstreamStraight)
	        THEN
	            #Transfer.Command_1 := FALSE;
	            #Transfer.Command_2 := FALSE;
	        END_IF;
	        
	    END_REGION
	    
	    REGION Write output
	        
	        // Static to output
	        
	        #Direction := #Transfer.Direction;
	        #Cmd1 := #Transfer.Command_1;
	        #Cmd2 := #Transfer.Command_2;
	        #ErrorReset := #Transfer.ErrorReset;
	        
	    END_REGION
	    
	    REGION Reset Fault 
	        (* #ResetFault_PE(CLK:=#Fault);
	        
	        IF #ResetFault_PE.Q THEN
	            #ErrorReset := TRUE;
	        END_IF; *)
	        
	        #ErrorReset := #SSR.ResetSystem;
	        
	    END_REGION 
	    
	    
	END_REGION
	
	
END_FUNCTION_BLOCK
END_NAMESPACE

